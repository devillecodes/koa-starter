box: node:8

build:
  steps:
    - script:
      name: setup ssh for install
      code: ./setup-ssh.sh
    - npm-install
    - script:
      name: cleanup ssh
      code: ./cleanup-ssh.sh
    - npm-test
    - script:
      name: code coverage
      code: npm run coverage
    - script:
      name: linting
      code: npm run lint
    - script:
      name: cleanup dev dependencies
      code: npm prune --production
    - script:
      name: save image tag to file
      code: ./create-image-tag.sh

  after-steps:
    - slack-notifier:
        url: $SLACK_WEBHOOK_URL
        username: wercker

push:
  # use slim version for deployments
  box: node:8-slim
  steps:
    - script:
      name: read image tag from file
      code: export IMAGE_TAG=`cat image-tag.txt`
    - internal/docker-push:
      registry: https://gcr.io/v2
      username: _json_key
      password: $GCR_JSON_KEY_FILE
      repository: gcr.io/arctic-eye-468/boilerplate #default is $WERCKER_GIT_REPOSITORY
      tag: latest, $IMAGE_TAG
      working-dir: $WERCKER_SOURCE_DIR
      cmd: npm start

  after-steps:
    - slack-notifier:
        url: $SLACK_WEBHOOK_URL
        username: wercker

deploy:
  steps:
    - script:
      name: read image tag from file
      code: export IMAGE_TAG=`cat image-tag.txt`
    - script:
        name: create deployment file
        code: ./create-deploy.sh
    - kubectl:
        server: $KUBERNETES_MASTER
        username: $KUBERNETES_USERNAME
        password: $KUBERNETES_PASSWORD
        insecure-skip-tls-verify: true
        command: apply -f deploy.yml

  after-steps:
    - script:
        name: remove sensitive files
        code: rm deploy.yml
    - slack-notifier:
        url: $SLACK_WEBHOOK_URL
        username: wercker
    - script:
        name: notify datadog of deployment
        code: ./datadog-notify-deploy.sh
